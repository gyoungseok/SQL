<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>421205830576374659</string>
			<key>name</key>
			<string>127.0.0.1</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0
			b3BYJG9iamVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRk
			YXRhgAGoCwwXGBkaHiVVJG51bGzTDQ4PEBMWV05TLmtleXNaTlMu
			b2JqZWN0c1YkY2xhc3OiERKAAoADohQVgASABYAHVHR5cGVUcm93
			c18QHVNlbGVjdGlvbkRldGFpbFR5cGVOU0luZGV4U2V00hsPHB1c
			TlNSYW5nZUNvdW50EACABtIfICEiWiRjbGFzc25hbWVYJGNsYXNz
			ZXNaTlNJbmRleFNldKIjJFpOU0luZGV4U2V0WE5TT2JqZWN00h8g
			JidcTlNEaWN0aW9uYXJ5oiYkAAgAEQAaACQAKQAyADcASQBMAFEA
			UwBcAGIAaQBxAHwAgwCGAIgAigCNAI8AkQCTAJgAnQC9AMIAzwDR
			ANMA2ADjAOwA9wD6AQUBDgETASAAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {695, 477}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>use practice;

-- RFM analysis

-- 분석용 데이터 마트 생성		

CREATE TABLE RFM AS 
SELECT 
  A.*, 
  B.구매금액, 
  B.구매횟수 
FROM 
  CUSTOMER AS A 
  LEFT JOIN (
    SELECT 
      A.MEM_NO 
      ,SUM(A.SALES_QTY * B.PRICE) AS 구매금액 /* Monetary: 구매 금액 */ 
      ,COUNT(A.ORDER_NO) AS 구매횟수 /* Frequency: 구매 빈도 */ 
    FROM 
      SALES AS A 
      LEFT JOIN PRODUCT AS B ON A.PRODUCT_CODE = B.PRODUCT_CODE 
    WHERE 
      YEAR(A.ORDER_DATE) = '2020' /* Recency: 최근성 */ 
    GROUP BY 
      A.MEM_NO
  ) AS B
 ON A.MEM_NO = B.MEM_NO;
   
-- 데이터마트 생성확인   
   select * from RFM;
  
-- 1. RFM 세분화별 회원수
  
-- 1-1. 회원세분화 진행(vip, 우수회원, 일반회원, 잠재회원)
  select *,
  	case when 구매금액 &gt; 5000000 then 'vip'
  		 when 구매금액 &gt; 1000000 or 구매횟수 &gt; 3 then '우수회원'
  		 when 구매금액 &gt; 0 then '일반회원'
  		 else '잠재회원' end 
  		 as 회원세분화
  from RFM;

 
 -- 1-2. 세분화된 회원과 회원수를 파악
 select 회원세분화
 		,count(mem_no) as 회원수
 from (
 		select *,
 			   case when 구매금액 &gt; 5000000 then 'vip'
 			   		when 구매금액 &gt; 1000000 or 구매횟수 &gt; 3 then '우수회원'
 			   		when 구매금액 &gt; 0 then '일반회원'
 			   		else '잠재회원' end
 			   		as 회원세분화
 		from RFM
 	  ) as A
-- (group by 회원세분화 한 줄로 적으니 오류가 계속해서 발생했다.)
group
	by 회원세분화
order
	by 회원수;

-- 1-2. 선생님 코드 
SELECT  회원세분화
		,COUNT(MEM_NO) AS 회원수
  FROM  (
		SELECT  *
				,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
					  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
					  WHEN 구매금액 &gt;        0 THEN '일반회원'
					  ELSE '잠재회원' END AS 회원세분화
		  FROM  RFM
		)AS A
 GROUP
    BY  회원세분화
 ORDER
    BY  회원수 ASC;
   
   
-- 2. RFM 세분화별 매출액

select 회원세분화, 
	   sum(구매금액) as 구매금액
from (
	 select *,
	 		 case when 구매금액 &gt; 5000000 then 'vip'
	 		 	  when 구매금액 &gt; 1000000 or 구매횟수 &gt; 3 then '우수회원'
	 		 	  when 구매금액 &gt; 0 then '일반회원'
	 		 	  else '잠재회원' end as 회원세분화
	 from RFM
) as A
group
	by 회원세분화
order
	by 구매금액 desc;

-- 3. RFM 세분화별 인당 구매금액
select 회원세분화,
	   sum(구매금액) / count(mem_no) as 인당_구매금액
from (
	 select *,
	 		 case when 구매금액 &gt; 5000000 then 'vip'
	 		 	  when 구매금액 &gt; 1000000 or 구매횟수 &gt; 3 then '우수회원'
	 		 	  when 구매금액 &gt; 0 then '일반회원'
	 		 	  else '잠재회원' end as 회원세분화
	 from RFM
) as A
group
	by 회원세분화
order
	by 구매금액 desc;

-- 선생님코드

SELECT  회원세분화
		,SUM(구매금액) / COUNT(MEM_NO) AS 인당_구매금액
  FROM  (
		SELECT  *
				,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
					  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
					  WHEN 구매금액 &gt;        0 THEN '일반회원'
					  ELSE '잠재회원' END AS 회원세분화
		  FROM  RFM
		)AS A
 GROUP
    BY  회원세분화
 order
 	by 구매금액;

   





 </string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>297</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>/****************************************************************************/
/*******************************회원 프로파일 분석********************************/
/****************************************************************************/

/***************회원 프로파일 분석용 데이터 마트***************/
CREATE TABLE CUSTOMER_PROFILE AS
SELECT  A.*
		,DATE_FORMAT(JOIN_DATE, '%Y-%m') AS 가입년월

        ,2021 - YEAR(BIRTHDAY) + 1 AS 나이
        ,CASE WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 20 THEN '10대 이하'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 30 THEN '20대'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 40 THEN '30대'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 50 THEN '40대'
              ELSE '50대 이상' END AS 연령대

		,CASE WHEN B.MEM_NO IS NOT NULL THEN '구매'
			  ELSE '미구매' END AS 구매여부
  FROM  CUSTOMER AS A
  LEFT
  JOIN  (
		SELECT  DISTINCT MEM_NO
          FROM  SALES
		)AS B
    ON  A.MEM_NO = B.MEM_NO</string>
		<string>/* 확인 */
SELECT  *
  FROM  CUSTOMER_PROFILE</string>
		<string>USE PRACTICE</string>
		<string>/* 3. RFM 세분화별 인당 구매금액 */

SELECT  회원세분화
		,SUM(구매금액) / COUNT(MEM_NO) AS 인당_구매금액
  FROM  (
		SELECT  *
				,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
					  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
					  WHEN 구매금액 &gt;        0 THEN '일반회원'
					  ELSE '잠재회원' END AS 회원세분화
		  FROM  RFM
		)AS A
 GROUP
    BY  회원세분화
 ORDER
    BY  구매금액 DESC</string>
		<string>/* 2. RFM 세분화별 매출액 */

SELECT  회원세분화
		,SUM(구매금액) AS 구매금액
  FROM  (
		SELECT  *
				,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
					  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
					  WHEN 구매금액 &gt;        0 THEN '일반회원'
					  ELSE '잠재회원' END AS 회원세분화
		  FROM  RFM
		)AS A
 GROUP
    BY  회원세분화
 ORDER
    BY  구매금액 DESC</string>
		<string>SELECT  회원세분화
		,COUNT(MEM_NO) AS 회원수
  FROM  (
		SELECT  *
				,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
					  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
					  WHEN 구매금액 &gt;        0 THEN '일반회원'
					  ELSE '잠재회원' END AS 회원세분화
		  FROM  RFM
		)AS A
 GROUP
    BY  회원세분화
 ORDER
    BY  회원수 ASC</string>
		<string>/* 1. RFM 세분화별 회원수 */

SELECT  *
		,CASE WHEN 구매금액 &gt;  5000000 THEN 'VIP'
			  WHEN 구매금액 &gt;  1000000 OR 구매횟수 &gt; 3 THEN '우수회원'
			  WHEN 구매금액 &gt;        0 THEN '일반회원'
			  ELSE '잠재회원' END AS 회원세분화
  FROM  RFM</string>
		<string>/* 확인 */
SELECT  *
  FROM  RFM</string>
		<string>/****************************************************************************/
/*********************************RFM 분석************************************/
/****************************************************************************/

/***************RFM 분석용 데이터 마트***************/
CREATE TABLE RFM AS
SELECT  A.*
		,B.구매금액
        ,B.구매횟수
  FROM  CUSTOMER AS A
  LEFT
  JOIN  (
		SELECT  A.MEM_NO
				,SUM(A.SALES_QTY * B.PRICE) AS 구매금액 /* Monetary: 구매 금액 */
				,COUNT(A.ORDER_NO) AS 구매횟수 /* Frequency: 구매 빈도 */
		  FROM  SALES AS A
		  LEFT
		  JOIN  PRODUCT AS B
			ON  A.PRODUCT_CODE = B.PRODUCT_CODE
		 WHERE  YEAR(A.ORDER_DATE) = '2020' /* Recency: 최근성 */
		 GROUP
			BY  A.MEM_NO
		)AS B
    ON  A.MEM_NO = B.MEM_NO</string>
		<string>-- USE PRACTICE;

/****************************************************************************/
/*******************************회원 프로파일 분석********************************/
/****************************************************************************/

/***************회원 프로파일 분석용 데이터 마트***************/
CREATE TABLE CUSTOMER_PROFILE AS
SELECT  A.*
		,DATE_FORMAT(JOIN_DATE, '%Y-%m') AS 가입년월

        ,2021 - YEAR(BIRTHDAY) + 1 AS 나이
        ,CASE WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 20 THEN '10대 이하'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 30 THEN '20대'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 40 THEN '30대'
              WHEN 2021 - YEAR(BIRTHDAY) + 1 &lt; 50 THEN '40대'
              ELSE '50대 이상' END AS 연령대

		,CASE WHEN B.MEM_NO IS NOT NULL THEN '구매'
			  ELSE '미구매' END AS 구매여부
  FROM  CUSTOMER AS A
  LEFT
  JOIN  (
		SELECT  DISTINCT MEM_NO
          FROM  SALES
		)AS B
    ON  A.MEM_NO = B.MEM_NO</string>
		<string>--  10개 이상 주문한 직원을 조회
SELECT Employee.lastname, count(orders.orderId)
AS number_of_orders
FROM (orders
INNER JOIN Employee ON orders.employeeId = Employee.employeeId)
GROUP BY lastname
HAVING count(orders.orderId) &gt; 10
ORDER BY count(orders.orderId) DESC</string>
		<string>--  10개 이상 주문한 직원을 조회
SELECT Employee.lastname, count(orders.orderId)
AS number_of_orders
FROM (orders
INNER JOIN Employee ON orders.employeeId = Employee.employeeId)
GROUP BY lastname
HAVING count(orders.orderId) &gt; 10</string>
		<string>-- HAVING
-- 고객이 5명 이상인 각 국가의 고객수를 조회
SELECT count(custId), country
FROM customers
GROUP BY country
HAVING count(custId) &gt; 5
ORDER BY count(custId)  DESC</string>
		<string>-- HAVING
-- 고객이 5명 이상인 각 국가의 고객수를 조회
SELECT count(custId), country
FROM customers
GROUP BY country
HAVING count(custId) &gt; 5
ORDER BY DESC</string>
		<string>-- HAVING
-- 고객이 5명 이상인 각 국가의 고객수를 조회
SELECT count(custId), country
FROM customers
GROUP BY country
HAVING count(custId) &gt; 5</string>
		<string>-- HAVING
-- 고객이 5명 이상인 각 국가의 고객수를 조회
SELECT count(custId), country
FROM customers
GROUP BY country
HAVING count(custId), &gt; 5</string>
		<string>-- JOIN + GROUP BY
-- 각 배송업체에서 보낸 주문 수
SELECT shippers.companyName, COUNT(orders.orderId)
AS number_of_orders
FROM orders
LEFT JOIN shippers ON orders.shipperid = shippers.shipperId
GROUP BY companyName</string>
		<string>-- 내림차순으로 각 국가의 고객 수를 조회
SELECT country, count(custid) 
FROM customers
GROUP BY country
ORDER BY count(custid) DESC</string>
		<string>-- 내림차순으로 각 국가의 고객 수를 조회
SELECT count(custid), country
FROM customers
GROUP BY country
ORDER BY count(custid) desc</string>
		<string>-- GROUP BY
-- 각 국가의 고객 수를 조회
SELECT count(custid), country
FROM customers
GROUP BY country</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.31</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
